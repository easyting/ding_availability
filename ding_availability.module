<?php
/**
 * @file
 * Availability information for ding objects.
 */
// Load Field module hooks.
module_load_include('inc', 'ding_availability', 'ding_availability.field');

/**
 * Implements hook_menu().
 */
function ding_availability_menu() {
  $items['ding_availability/issues'] = array(
    'page callback' => 'ding_availability_issues_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['ding_availability/availability'] = array(
    'page callback' => 'ding_availability_availability_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['ding_availability/holdings'] = array(
    'page callback' => 'ding_availability_holdings_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_ding_provider_user().
 */
function ding_availability_ding_provider_user() {
  return array(
    'availability' => array(
      'required' => TRUE,
      'install time setup' => TRUE,
    ),
  );
}

/**
 * AJAX handler for issues retrieval.
 *
 * @param string $provider_ids
 *   Comma separated item id's.
 */
function ding_availability_issues_js($provider_ids) {
  drupal_json_output(ding_availability_items(explode(',', $provider_ids)));
}

/**
 * AJAX handler for availability retrieval.
 *
 * @param string $provider_ids
 *   Comma separated item id's.
 */
function ding_availability_availability_js($provider_ids) {
  drupal_json_output(ding_availability_availability(explode(',', $provider_ids)));
}

/**
 * AJAX handler for holdings retrieval.
 *
 * @param string $provider_ids
 *   Comma separated item id's.
 */
function ding_availability_holdings_js($provider_ids) {
  drupal_json_output(ding_availability_holdings(explode(',', $provider_ids)));
}

/**
 * Fetch information if item is available/reservable.
 *
 * @param array
 *   Array of item id's.
 *
 * @return array
 *   Array with item availability information.
 */
function ding_availability_availability($provider_ids) {
  $items = ding_provider_invoke('availability', 'availability', $provider_ids);

  $reservable_types = variable_get('ting_reservable_types', _ting_default_reservable_types());
  $agency = variable_get('ting_agency', '');

  // Since the ids came without agency number, prepend it so Ting! actually finds something.
  $ting_ids = array_keys($items);
  foreach ($ting_ids as &$id) {
    $id = $agency . ':' . $id;
  }

  // Single request is much faster...
  $entities = ting_get_objects($ting_ids);

  foreach ($items as &$item) {
    $entity = $entities[$agency . ':' . $item['local_id']];
    if ($entity != NULL && !in_array(strtolower($entity->getType()), $reservable_types)) {
      $item['show_reservation_button'] = FALSE;
    }

    _ding_availability_text($item);
  }

  return $items;
}

/**
 * Fetch information about item's holdings.
 */
function ding_availability_holdings($provider_ids) {
  $items = ding_provider_invoke('availability', 'holdings', $provider_ids);

  return $items;
}

/**
 * Adds the human readable status text of an item.
 */
function _ding_availability_text(&$item) {
  if ($item['available'] && $item['reservable']) {
    $item['status'] = t('available');
  }
  elseif (!$item['available'] && $item['reservable']) {
    $item['status'] = t('on loan');
  }
  elseif ($item['available'] && !$item['reservable']) {
    $item['status'] = t('not reservable');
  }
  elseif (!$item['available'] && !$item['reservable']) {
    $item['status'] = t('unavailable');
  }
}

/**
 * Implements hook_block_info().
 * Define availability legend block.
 */
function ding_availability_block_info() {
  return array(
    'legend' => array(
      'info' => t('Ding availability legend'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
  );
}

/**
 * Implements hook_block_view().
 * Define availability legend block.
 */
function ding_availability_block_view($delta = '') {
  $block['subject'] = t('Ding availability legend');
  $block['content'] = ding_availability_render_legend();
  return $block;
}

/**
 * Return rendered legend block for availability types.
 */
function ding_availability_render_legend() {

  drupal_add_css(drupal_get_path('module', 'ding_availability') . '/css/ding_availability_legend.css');

  // construct the image's path (.gif stored in a module subdir)
  $image_path = drupal_get_path('module', 'ding_availability') . '/images/blank.gif';

  // make some text, image's alt & title tags (SEO, accessibility)
  $availability_legend['available'] = t('Available');
  $availability_legend['on-loan'] = t('On loan');
  $availability_legend['unavailable'] = t('Unavailable');
  $availability_legend['unreservable'] = t('Not reservable');

  // render image html using theme_image (returns NULL if file doesn't exist)
  foreach ($availability_legend as $key => $val) {
    $format_label = '<span class="availability-label">' . $val . '</span>';
    $format_image = theme('image', array('path' => $image_path, 'alt' => $val, 'title' => $val));
    $format_items[] = '<div class="availability-legend-item ' . $key . '">' . $format_image . $format_label . '</div>';
  }
  $format_items[] = '<div class="clearfix"></div>';

  return '<div class="availability-legend">' . implode($format_items) . '</div>';
}

/**
 * ting_object_entities preprocessor.
 */
function ding_availability_preprocess_ting_object_entities(&$variables) {
  if (!empty($variables['content']) && function_exists('ding_availability_render_legend')) {
    $variables['content']['availability_legend'] = array(
      '#markup' => ding_availability_render_legend(),
      '#weight' => -10,
    );
  }
}
